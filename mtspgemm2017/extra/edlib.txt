
#ifdef _EDLIB1
#define pCORR .7225
#define pWRON .2275
#define minLEN 17
/* Compute potential overlap */
void getOverlaplen(int & pos_i, int & pos_j, std::string & row, std::string col, int & len, int & left) 
{
    /* Left margin passed as argument */
    int right;           /* Define the right margin */
    int overlaplength;   /* Expected overlap region length */
    int temp1, temp2;
    
    if(pos_i <= pos_j)
        left = pos_i;
    else left = pos_j;

    temp1 = row.length() - pos_i;   /* 1st value referred to A's row */
    temp2 = col.length() - pos_j;  /* 2nd value referred to B's col */

    if(temp1 <= temp2)
        right = temp1;
    else right = temp2;

    len = left+right; /* Estimated overlap */
}

/* EDLIB Local Alignment */
bool edlibOp(int & pos_i, int & pos_j, std::string & row, std::string & col, int & len, int & ed) 
{
    bool align;
    int left = 0;
    /* Compute the overlap potential length and obtain substring of 
    overlaplength from the considered pair and pass them to alignop */
    getOverlaplen(pos_i, pos_j, row, col, len, left);
    /* Obtain row and col substr of overlaplength */
    std::string substrow = row.substr(pos_i-left, len);   
    std::string substcol = col.substr(pos_j-left, len); 
    
    if(len >= minLEN)
    {
        Kmer kmerfromrow;
        Kmer kmerfromcol;

        kmerfromrow.set_kmer(substrow.c_str());
        kmerfromcol.set_kmer(substcol.c_str());

        kmerfromrow = kmerfromrow.rep();
        kmerfromcol = kmerfromcol.rep();

        char *read1 = new char[len+1];
        char *read2 = new char[len+1];

        kmerfromrow.toString(read1);
        kmerfromcol.toString(read2);
    
        /* In len we expect len*pow(pCORR, 2) correct base-pairs, so here we compute the maximum 
        edit distance as len - mean + 2 standard deviation = len - (len*pow(pCORR, 2) + 2 * qrt(len*pow(pCORR, 2)*(1-pow(pCORR, 2)) */
        int maxed = len-len*pCORR+2*sqrt(len*pCORR*pWRON); 
    
        EdlibAlignResult result = edlibAlign(read1, len, read2, len, edlibNewAlignConfig(maxed, EDLIB_MODE_NW, EDLIB_TASK_DISTANCE, NULL, 0));
        delete [] read1;
        delete [] read2;
    
        if(result.editDistance != -1)
        {
            align = true;
            ed = result.editDistance;
        }
        else align = false;
    
        edlibFreeAlignResult(result);
    }
    else align = false;

    return align;
}
#endif