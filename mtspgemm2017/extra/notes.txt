// SeqAn seed and extend alignment
                    //if(values[j]->count == 1)
                    //{

                        //sequenceH = reads[rowids[j]];
                        //sequenceV = reads[i+colStart[b]];
                //
                        //seqan::String<TSeed> seedChain;
                        //seqan::appendValue(seedChain, TSeed(values[j]->pos[1], values[j]->pos[1]+KMER_LENGTH, values[j]->pos[0], values[j]->pos[0]+KMER_LENGTH));
                //
                        //seqan::assignSource(row(alignment, 0), sequenceH);
                        //seqan::assignSource(row(alignment, 1), sequenceV);
                        //seqan::AlignConfig<true, false, false, true> alignConfig;
                    //
                        //int result = bandedChainAlignment(alignment, seedChain, scoringSchemeAnchor, scoringSchemeGap, alignConfig, 2);
                        //std::cout << "Score: " << result << std::endl;

                        // seqan::CharString col;
                        // seqan::CharString row;

                        /* Features added to BELLA, TODO: check reverse complement */
                        // const char *read1 = new char[reads[i+colStart[b]].length()+1];
                        // const char *read2 = new char[reads[rowids[j]].length()+1];
                        // read1 = reads[i+colStart[b]].c_str();
                        // read2 = reads[rowids[j]].c_str();
 
                       // /* Cheking if the two reads are reverse complement, if so, adapt one of the two read */
                       // if(read1[values[j]->pos[0]] != read2[values[j]->pos[1]]) 
                       // {
  
                       //     char *twinread = new char[reads[i+colStart[b]].length()+1];
                       //     Kmer twinreadfromcol;
  
                       //     twinreadfromcol.set_kmer(reads[i+colStart[b]].c_str());
                       //     twinreadfromcol = twinreadfromcol.twin();
  
                       //     twinreadfromcol.toString(twinread);
  
                       //     col = twinread;
                       //     row = reads[rowids[j]];
  
                       //     values[j]->pos[0] = reads[i+colStart[b]].length()-values[j]->pos[0]-KMER_LENGTH;
 
                        // } else
                        // {
                        // col = reads[i+colStart[b]];
                        // row = reads[rowids[j]];
                        // }

                        // Seed creation (as of now, we use just one seed)
                        // seqan::Seed<seqan::Simple> seed(values[j]->pos[0], values[j]->pos[1], KMER_LENGTH); // begin(read i), begin(read j) and length(seed)
                        // seqan::Score<int, seqan::Simple> scoringScheme(1, -1, -1);
                        // Select drop off: max(\epsilon, k * error_rate * sequence_extended_so_far)
                        // Some initial guesses would be \epsilon=3, and k=2 (these are of course tunable)

                        // if(extendSeed(seed, col, row, seqan::EXTEND_BOTH, scoringScheme, pWRON, seqan::UnGappedXDrop()) == true)
                        //    myBatch << i+colStart[b] << ',' << rowids[j] << ',' << values[j]->count << endl;
                        // extendSeed(seed, col, row, seqan::EXTEND_BOTH, scoringScheme, 3, seqan::GappedXDrop());
                        // std::cout << endPositionH(seed3) << std::endl;  //output: 14
                        // std::cout << endPositionV(seed3) << std::endl;  //output: 13
                       
                    //}